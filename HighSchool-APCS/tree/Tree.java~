package apcs.tree;

public class Tree implements BSTree {

	TreeNode root;

	/**
	 * Constructs a new tree with nothing as the root
	 */
	public Tree() {
		root = null;
	}

	/**
	 * Constructs a new tree with the given Comparable as the root
	 * @param o The root of the constructed tree
	 */
	public Tree(Comparable o) {
		root = new TreeNode(o);
	}

	/**
	 * Adds the given Comparable to the tree
	 * @param o The new object to be added to the tree
	 */
	public void add(Comparable o) {
		if (root == null) {
			root = new TreeNode(o);
			return;
		}
		TreeNode temp = root;
		for (;;) {
			int comp = temp.getValue().compareTo(o);
			if (comp > 0) {
				if (temp.getLeft() == null) {
					temp.setLeft(new TreeNode(o));
					return;
				}
				temp = temp.getLeft();
			} else {
				if (temp.getRight() == null) {
					temp.setRight(new TreeNode(o));
					return;
				}
				temp = temp.getRight();
			}
		}
	}

	/**
	 * Returns true if the given Comparable is inside the tree
	 * @param s The object to be searched for
	 */
	public boolean search(Comparable s) {
		TreeNode temp = root;
		while (temp != null) {
			if (temp.getValue() == s) {
				return true;
			}
			if (temp.getValue().compareTo(s) < 0) {
				temp = temp.getRight();
			} else if (temp.getValue().compareTo(s) > 0) {
				temp = temp.getLeft();
			}
		}
		return false;
	}

	/**
	 * Returns the tallest leaf of the tree
	 * @return The tallest leaf's height
	 */
	public int height() {
		if (root == null)
			return 0;
		else if (root.getLeft() != null && root.getRight() != null) {
			return Math.max(height(root.getLeft(), 1), height(root.getRight(), 1));
		} else if (root.getLeft() == null) {
			System.out.println("In max");
			return height(root.getRight(), 1);
		} else if (root.getRight() == null) {
			return height(root.getLeft(), 1);
		} else {
			return -1;
		}
	}

	/**
	 * Private helper method to return the height recusively
	 * @param x
	 * @param i
	 * @return
	 */
	private int height(TreeNode x, int i) {
		if (x == null)
			return i;
		else if (x.getLeft() != null && x.getRight() != null) {
			return Math.max(height(x.getLeft(), i + 1), height(x.getRight(), i + 1));
		} else if (x.getLeft() == null) {
			return height(x.getRight(), i + 1);
		} else if (x.getRight() == null) {
			return height(x.getLeft(), i + 1);
		} else {
			return -1;
		}
	}

	/**
	 * @return The PreOrder String representation of the tree
	 */
	public String toStringPreOrder() {
		return root.toPreOrderString();
	}

	/**
	 * @return The InOrder String representation of the tree
	 */
	public String toStringInOrder() {
		return root.toInOrderString();
	}

	/**
	 * Useless method as of now
	 */
	public void remove(Comparable<Object> c) {
		return;
	}

}
